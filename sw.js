if(!self.define){let e={},o;const t=(r,n)=>(r=new URL(r+".js",n).href,e[r]||new Promise(a=>{if("document"in self){const i=document.createElement("script");i.src=r,i.onload=a,document.head.appendChild(i)}else o=r,importScripts(r),a()}).then(()=>{let a=e[r];if(!a)throw new Error(`Module ${r} didnâ€™t register its module`);return a}));self.define=(r,n)=>{const a=o||("document"in self?document.currentScript.src:"")||location.href;if(e[a])return;let i={};const u=s=>t(s,a),p={module:{uri:a},exports:i,require:u};e[a]=Promise.all(r.map(s=>p[s]||u(s))).then(s=>(n(...s),i))}}const f="story-images-v4",l="core-cache-v4",m=[{"revision":null,"url":"assets/index-Byo6CONB.js"},{"revision":null,"url":"assets/index-M36qbiWD.css"},{"revision":"336f6d7a4226527d0f5de40fdd401339","url":"index.html"},{"revision":"990766e9813418881fb7f9dee415f066","url":"registerSW.js"},{"revision":"e7770bb27593446dde3f45942df530f9","url":"workbox-55d1eca6.js"},{"revision":"ac73f380ba0147f4fa5951dfaba2a665","url":"images/logo.png"},{"revision":"6fbf656198751d3aae2c0b8dbbcdfcbd","url":"images/icons/icon-192x192.png"},{"revision":"57fbadbadfc3d36857a7891462aab470","url":"images/icons/icon-512x512.png"},{"revision":"a11a8257c0eb7123b380222c651b4030","url":"manifest.webmanifest"}],d=["/","/index.html","/images/logo.png","/images/icons/icon-192x192.png","/images/icons/icon-512x512.png"],k="https://story-api.dicoding.dev/images/stories/",g="https://story-api.dicoding.dev/v1",S="story-app-db",c="offline-stories";self.addEventListener("install",e=>{console.log("[Service Worker] Install event triggered."),e.waitUntil(caches.open(l).then(o=>(console.log("[Service Worker] Caching core files..."),o.addAll(m),o.addAll(d).catch(t=>{console.error("[Service Worker] Failed to cache some CORE_FILES:",t)})))),self.skipWaiting()});async function h(){return new Promise((e,o)=>{const t=indexedDB.open(S,2);t.onupgradeneeded=r=>{const n=r.target.result;n.objectStoreNames.contains(c)||n.createObjectStore(c,{keyPath:"id",autoIncrement:!0}),console.log("[Service Worker] IndexedDB upgrade/creation for SW complete.")},t.onsuccess=r=>{e(r.target.result)},t.onerror=r=>{console.error("[Service Worker] Error opening IndexedDB for SW:",r.target.error),o(r.target.error)}})}async function b(){return(await h()).transaction(c,"readonly").objectStore(c).getAll()}async function y(e){const t=(await h()).transaction(c,"readwrite");await t.objectStore(c).delete(e),await t.done,console.log("[Service Worker] Story deleted from offline queue:",e)}self.addEventListener("install",e=>{console.log("[Service Worker] Install event triggered."),e.waitUntil(caches.open(l).then(o=>(console.log("[Service Worker] Caching core files..."),o.addAll(d).catch(t=>{console.error("[Service Worker] Failed to cache some CORE_FILES:",t)})))),self.skipWaiting()});self.addEventListener("activate",e=>(console.log("[Service Worker] Activate event triggered."),e.waitUntil(caches.keys().then(o=>Promise.all(o.map(t=>{if(t!==f&&t!==l&&!t.startsWith("api-data-cache-"))return console.log("[Service Worker] Clearing old cache:",t),caches.delete(t)})))),self.clients.claim()));self.addEventListener("fetch",e=>{const o=new URL(e.request.url);if(o.href.startsWith(k)){e.respondWith(caches.match(e.request).then(t=>t?(console.log("[Service Worker] Mengembalikan gambar dari cache:",e.request.url),t):fetch(e.request).then(r=>{if(!r||r.status!==200||r.type!=="basic"&&r.type!=="cors")return console.warn("[Service Worker] Respon tidak valid untuk caching gambar:",e.request.url,r.status,r.type),r;const n=r.clone();return caches.open(f).then(a=>{console.log("[Service Worker] Meng-cache gambar baru:",e.request.url),a.put(e.request,n)}),r}).catch(()=>(console.log("[Service Worker] Gagal mengambil/meng-cache gambar, menyajikan fallback:",e.request.url),caches.match("/images/logo.png")))));return}if(d.some(t=>o.pathname===t||o.pathname.endsWith(t))){e.respondWith(caches.match(e.request).then(t=>t||fetch(e.request).catch(()=>(console.warn("[Service Worker] Gagal memuat file inti dari cache atau jaringan:",e.request.url),new Response("Offline: Content not available",{status:503,headers:{"Content-Type":"text/plain"}})))));return}if(o.href.startsWith(`${g}/stories`)){e.respondWith(fetch(e.request).then(t=>{if(t.ok){const r=t.clone();caches.open("api-data-cache-v1").then(n=>{n.put(e.request,r)})}return t}).catch(async()=>{const t=await caches.match(e.request);return t?(console.log("[Service Worker] Mengembalikan data API dari cache:",e.request.url),t):(console.error("[Service Worker] Gagal memuat data API dari jaringan maupun cache:",e.request.url),new Response("Offline: Data tidak tersedia",{status:503,headers:{"Content-Type":"text/plain"}}))}));return}e.respondWith(fetch(e.request).catch(()=>caches.match(e.request)))});self.addEventListener("sync",function(e){e.tag==="sync-new-stories"&&(console.log("[Service Worker] Event sync dipicu untuk cerita baru!"),e.waitUntil(W()))});async function W(){console.log("[Service Worker] Mencoba menyinkronkan cerita baru...");const e=await b();if(e.length===0){console.log("[Service Worker] Tidak ada cerita offline yang perlu disinkronkan.");return}for(const o of e)try{console.log(`[Service Worker] Mengirim cerita ke server (ID: ${o.id})...`,o);const t=new FormData;t.append("description",o.description),o.photoBlob instanceof ArrayBuffer?t.append("photo",new Blob([o.photoBlob],{type:o.photoType||"image/jpeg"}),o.photoName||"image.jpg"):o.photoBlob instanceof Blob?t.append("photo",o.photoBlob,o.photoName||"image.jpg"):console.warn(`[Service Worker] photoBlob untuk cerita ID ${o.id} bukan Blob/ArrayBuffer. Tidak dapat mengirim gambar.`);const r=await fetch(`${g}/stories`,{method:"POST",headers:{Authorization:`Bearer ${o.token}`},body:t});if(r.ok)console.log("[Service Worker] Cerita berhasil disinkronkan:",o.id),await y(o.id);else{const n=await r.text();console.error("[Service Worker] Gagal menyinkronkan cerita (status:",r.status,"):",o.id,n)}}catch(t){console.error("[Service Worker] Error selama sinkronisasi cerita (ID:",o.id,"):",t)}console.log("[Service Worker] Proses sinkronisasi cerita baru selesai.")}self.addEventListener("push",function(e){console.log("[SW] Push event received.");let o="Notifikasi Baru",t={body:"Ada notifikasi baru dari story!",icon:"/images/icons/icon-192x192.png",badge:"/images/icons/icon-192x192.png",vibrate:[200,100,200,100,200,100,200],tag:"story-notification",renotify:!0,data:{url:"/"}};if(e.data)try{const r=e.data.json();console.log("[SW] Payload:",r),o=r.title||o,t.body=r.body||t.body,r.icon&&(t.icon=r.icon),r.badge&&(t.badge=r.badge),r.url&&(t.data.url=r.url)}catch(r){console.warn("[SW] Gagal parse JSON payload push. Menggunakan data mentah:",r),t.body=e.data.text()}e.waitUntil(self.registration.showNotification(o,t))});self.addEventListener("notificationclick",function(e){var t;e.notification.close();const o=((t=e.notification.data)==null?void 0:t.url)||"/";e.waitUntil(clients.matchAll({type:"window",includeUncontrolled:!0}).then(r=>{for(const n of r)if(n.url.includes(o)&&"focus"in n)return n.focus();if(clients.openWindow)return clients.openWindow(o)}))});
